int sourceint = 0xFF;

int tmr1rama1 = 0x00;
int tmr1rama2 = 0x00;

int portbrama1 = 0x00;
int portbrama2 = 0x00;

char gps_state=0;
int gpstry = 0x00;
int gpsdataok = 0x00;
int gps_fail_ok = 0x00;

int sdtry = 0x00;
int sddataok = 0x00;
int sd_fail_ok = 0x00;

int recibiok      = 0x00;
int recibierror   = 0x00;
int recibiconnect = 0x00;
int recibigood    = 0x00;
int recibireq     = 0x00;
int recibinoreq   = 0x00;
int recibisisms   = 0x00;

int sms_status=0x00;

char origendatos = '0';


char d1='0',d2='0',d3='0',d4='0',d5='0',d6='0',d7='0',d8='0',d9='0';
char direc1='0';
char e1='0',e2='0',e3='0',e4='0',e5='0',e6='0',e7='0',e8='0',e9='0',e10='0';
char direc2='0';

const char a0[] = "AT&K=0"    ;
const char a1[] = "AT+CGDCONT?"    ;
const char a2[] = "AT#SCFG?"  ;
const char a3[] = "AT#SGACT=1,1";
const char a4[] = "AT#SD=1,0,80,\"vicvicvar.com\",255,0"   ;

const char er0[] = "AT+CMEE=1"    ;
const char er1[] = "AT+CEER"    ;//nelcc
const char atc7[] = "AT+CRC=1";



// Set of basic AT commands
const char atc0[] = "AT";                        // Every AT command starts with "AT"
const char atc1[] = "ATE0";                      // Disable command echo
const char atc2[] = "AT+CMGF=1";                 // TXT messages
const char atc3[] = "AT+CMGS=\"";                // sends SMS to desired number

//

//Codigo para insertar datos
const char bc1[] = "POST /parser.php HTTP/1.1"   ;
const char bc2[] = "Host: vicvicvar.com"   ;
const char bc3[] = "Connection: keep-alive"   ;
const char bc4[] = "Content-Length: 45"   ;
const char bc5[] = "Content-Type: application/x-www-form-urlencoded";
const char bc6[] = ""   ;
//**




// SMS Message string
char SMS_Message[300];

// phone number string
char phone_number[20]= "+50240907544";

// State machine control variables
char gsm_state = 0;


// Send command or data to the Telit GM862 Module - (const)
void GM862_Send(const char *s)
{
// Send command or data string
   while(*s) {
    UART_Wr_Ptr(*s++);
   }
// Terminatation by CR
   UART_Wr_Ptr(0x0D);
}

// Send command or data to the Telit GM862 Module - (RAM)
void GM862_Send_Ram(char *s1)   //
{
// Send command or data string
   while(*s1) {
    UART_Wr_Ptr(*s1++);
   }
// Terminatation by CR
   UART_Wr_Ptr(0x0D);
}

void GM862_Send_LF(const char *s)
{
// Send command or data string
   while(*s) {
    UART_Wr_Ptr(*s++);
   }
// Terminatation by CR
   UART_Wr_Ptr(0x0D);
   // Terminatation by LF
   UART_Wr_Ptr(0x0A);
}

void GPS_ON_OFF()
{
     gpstry=0x00;
     gps_fail_ok = 0x00;

     while(gpstry !=0x04 )
     {
         Delay_ms(10000);
         if(gpsdataok == 0x01)
         {
            gpsdataok = 0x00;
            gpstry = 0x04;
            //GPS OK
            gps_fail_ok = 0x01;
         }
         else
         {
            //GPS Fail
            gpstry++;

         }
     }
}

void Wait()
{
   Delay_ms(3000);
}

void INIT_COM_GPRS()
{

  Delay_ms(7000);



// Negotiate baud rate
  recibiok=0x00;
  while(1)
  {
    GM862_Send(atc0);                 // Send "AT" string until GSM862 sets up its baud rade
    Delay_ms(100);                    // and gets it correctly
    if (recibiok == 0x01)     // If GSM862 says "OK" on our baud rate we program can continue
      {
        recibiok = 0x00;
        break;

      }
  }


  GM862_Send(atc7);
  Wait();
  GM862_Send(atc1);
  Wait();
  GM862_Send(er0);
  Wait();
  GM862_Send(er1);
  Wait();
  GM862_Send(atc2);
  Wait() ;
  GM862_Send(a0);
  Wait() ;
  GM862_Send(a1);        // aaapn
  Wait() ;
  GM862_Send(a2);        // config act
  Wait() ;

  recibiok=0x00;
  while(1)
  {
    GM862_Send(a3);                 // Send "AT" string until GSM862 sets up its baud rade
    Delay_ms(4000);                    // and gets it correctly
    if (recibiok == 0x01)     // If GSM862 says "OK" on our baud rate we program can continue
      {
       recibiok=0x00;
       break;
      }
  }

  recibierror=0x00;
  GM862_Send(a4);
   while(1)
  {
    if (recibiconnect == 0x01 || recibierror==0x01)     // If GSM862 says "OK" on our baud rate we program can continue
    {
      recibiconnect = 0x00;
      recibierror = 0x00;
      break;
    }
  }

  Wait();

  GM862_Send_LF(bc1);
  GM862_Send_LF(bc2);
  GM862_Send_LF(bc3);
  GM862_Send_LF(bc4);
  GM862_Send_LF(bc5);
  GM862_Send_LF(bc6);
  UART1_Write_Text("user=LM741CN&lat=");
  UART1_Write(d1);
  UART1_Write(d2);
  UART1_Write(d3);
  UART1_Write(d4);
  UART1_Write(d6);
  UART1_Write(d7);
  UART1_Write(d8);
  UART1_Write(d9);
  UART1_Write_Text("&lon=");
  UART1_Write(e1);
  UART1_Write(e2);
  UART1_Write(e3);
  UART1_Write(e4);
  UART1_Write(e5);
  UART1_Write(e7);
  UART1_Write(e8);
  UART1_Write(e9);
  UART1_Write(e10);
  UART1_Write_Text("&org=");
  UART1_Write(origendatos);

  GM862_Send_LF(bc6);
  //GM862_Send_LF(bc6);


}

void main()
{
  ANSELA = 0;             // Set all ports as digital
  ANSELB = 0;
  ANSELC = 0;
  ANSELD = 0;
  ANSELE = 0;

  TRISD=0x00;
  PORTD=0x00;
  PORTC=0x00;
  SLRCON = 0;             // Set output slew rate on all ports at standard rate

//Configuracion portc
  TRISC=0x00;
  TRISC.B7=0x01;

//

  PORTB=0x00;
  TRISB=0x00;
  TRISB.f7=1;
  TRISB.b7=1;
//Configuracion timer 1
  TRISC.F0 = 1;
  T1CON = 0x00;               //limpio variables del timer1
  TMR1GE_bit=0;               //Apago el gate
  TMR1ON_bit = 1;             //Enciendo timer
  TMR1CS1_bit = 1;
  TMR1CS0_bit = 0;
  T1SOSCEN_bit = 0;
  T1SYNC_bit = 1;
  T1RD16_bit = 0;
  TMR1IF_bit = 0;             // clear TMR1IF
  TMR1H = 0xFF;               // Initialize Timer1 register
  TMR1L = 0xFE;
  TMR1IE_bit = 1;             // enable Timer1 interrupt
//
  UART2_Init(57600);
//Configuracion PORTBinterrupt

  RBIE_bit = 1;
  IOCB.IOCB7 = 0xFF;
//
// Setup interrupts
  RC1IE_bit = 1;          // Enable Rx1 intterupts
  RC2IE_bit=1;
  PEIE_bit = 1;           // Enable peripheral interrupts
  GIE_bit  = 1;           // Enable global interrupts
//


  UART1_Init(9600);
  Delay_ms(200);

  //Wait();                 // Wait a while till the GSM network is configured


 // blink as a sign that initialization is successfully completed
 PORTD = 0xFF;
 Delay_ms(500);
 PORTD = 0;

 while(1)
 {
   asm Sleep;
   //Fue TMR1
   if(sourceint==0x01)
   {
     UART1_Write_Text("Entre a la source de TMR1 ");

     while(1)
    {
      PORTC=0b0000010;
      UART1_Write_Text("inicio gprs ");
      origendatos='0';
      INIT_COM_GPRS();
      Delay_ms(35000);
      if (recibireq == 0x01)
      {
        recibireq = 0x00;
        tmr1rama1 = 0x01;

        UART1_Write_Text("  recibireq");
        break;
      }
      else if (recibinoreq==0x01)
      {
        recibinoreq=0x00;
        UART1_Write_Text("+++");
        PORTC=0b0000000;
        break;
      }


    }
   }
   //si no fue tmr1 fue portb
   else
   {
      UART1_Write_Text(" PORTBint ");
      LATC=0b0000100;
      Wait();
      LATC=0b0001100;
      GPS_ON_OFF();
      if(gps_fail_ok==0x01)
      {
        portbrama1=0x01;
        UART1_Write_Text(" si gps ");
      }
      else
      {
        portbrama1=0x00;
        UART1_Write_Text(" no gps ");
      }
   }
   //Rama 1 tmr1
   if(tmr1rama1==0x01)
   {
     UART1_Write_Text("rama1tmr1");
     tmr1rama1=0x00;
     LATC=0b0000100;
     Wait();
     LATC=0b0001100;
     GPS_ON_OFF();
     if(gps_fail_ok==0x01)
     {
       tmr1rama2=0x01;
     }
     else
     {
      UART1_Write_Text("nel gps");
     }

   }
   //Rama 2 tmr1
   if(tmr1rama2==0x01)
   {
       LATC=0b0000010;
       UART1_Write_Text("rama2tmr1");
       tmr1rama2=0x00;
       origendatos='1';
       while(1)
       {
       INIT_COM_GPRS();
       Delay_ms(13000);
       if (recibigood == 0x01)
       {
         recibigood = 0x00;

         UART1_Write_Text("fin rama tmr1");
         break;
        }
     }
    }
   //PORTB rama1
   if(portbrama1 == 0x01)
   {
     UART1_Write_Text("rama1portb");
     portbrama1 = 0x00;
     LATC=0b0000010;
     while(1)
    {
      UART1_Write_Text("inicio gprs ");
      origendatos='1';
      INIT_COM_GPRS();
      Delay_ms(13000);
      if (recibigood == 0x01)
      {
        recibigood = 0x00;

        UART1_Write_Text("recibigood");
        break;
      }

    }

   }
   LATC=0b0000000;
 }


}
void interrupt()
{
char tmp;
char tmp2;

 if(RC2IF_bit ==1)
 {
  RC2IF_bit = 0;
  tmp2 = UART2_Read();


  switch (gps_state)
  {
    case 0: {

            if(tmp2 == '$')
              gps_state = 1;
            else
              gps_state=0;
            break;

            }

    case 1: {
            if(tmp2 == 'G')
              gps_state = 2;
            else
              gps_state = 0 ;
            break;

            }
    case 2: {
            if(tmp2 == 'P')
             gps_state = 3;
            else
              gps_state = 0 ;
            break;

            }

    case 3: {
            if(tmp2 == 'G')
             gps_state = 4;
            else
              gps_state = 0 ;
            break;
            }
    case 4: {
            if(tmp2 == 'L')
             gps_state = 5;
            else
              gps_state = 0 ;
            break;
            }
    case 5: {
             if(tmp2 == 'L')
             gps_state = 6;
             else
             gps_state = 0 ;
             break;
             }

    case 6: {
             if(tmp2 == ',')
             gps_state = 7;
            else
              gps_state = 0 ;
            break;
            }

    case 7: {
             if(tmp2 >= '0')             //1
             {
                     gps_state = 8;
                     d1=tmp2;

             }
            else
              gps_state = 0 ;
            break;
            }

    case 8: {
               if(tmp2 >= '0')            //4
             {
                     gps_state = 9;
                     d2=tmp2;
             }
            else
              gps_state = 0 ;
            break;
            }

  case 9: {
                 if(tmp2 >= '0')           //3
             {
                     gps_state = 10;
                     d3=tmp2;
             }
            else
              gps_state = 0 ;
            break;
            }
  case 10: {
                 if(tmp2 >= '0')           //6
             {
                     gps_state = 11;
                     d4=tmp2;
             }
            else
              gps_state = 0 ;
            break;
            }

   case 11: {                                              //.
             if(tmp2 == '.')
             {
                     gps_state = 12;
                     d5=tmp2;
             }
             else
             gps_state = 0 ;
             break;
             }

  case 12: {
                 if(tmp2 >= '0')            //6
             {
                     gps_state = 13;
                     d6=tmp2;
             }
            else
              gps_state = 0 ;
            break;
            }

 case 13: {
                 if(tmp2 >= '0')            //3
             {
                     gps_state = 14;
                     d7=tmp2;
             }
            else
              gps_state = 0 ;
            break;
            }

 case 14: {
                 if(tmp2 >= '0')            //3
             {
                     gps_state = 15;
                     d8=tmp2;
             }
            else
              gps_state = 0 ;
            break;
            }
 case 15: {
                 if(tmp2 >= '0')            //3
             {
                     gps_state = 16;
                     d9=tmp2;

             }
            else
              gps_state = 0 ;
            break;
            }

   case 16: {                                              //,
             if(tmp2 == ',')
             {
                     gps_state = 17;
             }
             else
             gps_state = 0 ;
             break;
             }
   case 17: {                                              //N
             if(tmp2 == 'N' || tmp2=='S')
             {
                     gps_state = 18;
                     direc1=tmp2;
             }
             else
             gps_state = 0 ;
             break;
             }
   case 18: {                                              //,
             if(tmp2 == ',')
             {
                     gps_state = 19;
             }
             else
             gps_state = 0 ;
             break;
             }
 case 19: {
                 if(tmp2 >= '0')            //0
             {
                     gps_state = 20;
                     e1=tmp2;

             }
            else
              gps_state = 0 ;
            break;
            }
 case 20: {
                 if(tmp2 >= '0')            //9
             {
                     gps_state = 21;
                     e2=tmp2;

             }
            else
              gps_state = 0 ;
            break;
            }

 case 21: {
                 if(tmp2 >= '0')            //0
             {
                     gps_state = 22;
                     e3=tmp2;

             }
            else
              gps_state = 0 ;
            break;
            }

 case 22: {
                 if(tmp2 >= '0')            //3
             {
                     gps_state = 23;
                     e4=tmp2;

             }
            else
              gps_state = 0 ;
            break;
            }
 case 23: {
                 if(tmp2 >= '0')            //0
             {
                     gps_state = 24;
                     e5=tmp2;

             }
            else
              gps_state = 0 ;
            break;
            }

   case 24: {                                              //.
             if(tmp2 == '.')
             {
                     gps_state = 25;
                     e6=tmp2;
             }
             else
             gps_state = 0 ;
             break;
             }

 case 25: {
                 if(tmp2 >= '0')            //0
             {
                     gps_state = 26;
                     e7=tmp2;

             }
            else
              gps_state = 0 ;
            break;
            }
 case 26: {
                 if(tmp2 >= '0')            //4
             {
                     gps_state = 27;
                     e8=tmp2;

             }
            else
              gps_state = 0 ;
            break;
            }
 case 27: {
                 if(tmp2 >= '0')            //6
             {
                     gps_state = 28;
                     e9=tmp2;

             }
            else
              gps_state = 0 ;
            break;
            }
 case 28: {
                 if(tmp2 >= '0')            //6
             {
                     gps_state = 29;
                     e10=tmp2;

             }
            else
              gps_state = 0 ;
            break;
            }

   case 29: {                                              //,
             if(tmp2 == ',')
             {
                     gps_state = 30;
             }
             else
             gps_state = 0 ;
             break;
             }

   case 30: {                                              //W
             if(tmp2 == 'W' || tmp2=='E')
             {
                     gps_state = 0;
                     direc2=tmp2;
                     gpsdataok = 0x01;


             }
             else
             gps_state = 0 ;
             break;
             }


    default: {
              gps_state = 0 ;
             }
  }
 }

  if (TMR1IF_bit)
   {

      TMR1IF_bit = 0;           // clear TMR0IF
      TMR1H = 0xFF;
      TMR1L = 0xFE;
      sourceint = 0x01;

   }


  if (RBIF_bit)
  {

    RBIF_bit = 0;           // clear TMR0IF

    sourceint = 0x02;

  }
  if (RCIF_bit == 1)
  {
    RC1IF_bit = 0 ;                         // Do we have uart rx interrupt request?
    tmp = UART1_Read();                         // Get received byte

    switch (gsm_state)
    {
      case  0: {

                if (tmp == 'O')                  // We have 'O', it could be "OK"
                  gsm_state = 1;                 // Expecting 'K'
                if (tmp == '>')                  // We have '>', it could be "> "
                  gsm_state = 10;                // Expecting ' '
                if (tmp == 'E')                  // We have 'E', it could be "> "
                  gsm_state = 30;                // Expecting 'R'
                if (tmp == 'C')                  // We have 'C', it could be "Connect"
                  gsm_state = 110;               // Expecting O
                if (tmp == 'G')                  // We have 'G' its good LG
                  gsm_state = 60;               // Expecting O
                if (tmp == 'R')                  // We have 'G' its good LG
                  gsm_state = 70;               // Expecting O
                if (tmp == '5')                  // We have 'G' its good LG
                  gsm_state = 80;               // Expecting O
                if (tmp=='N')
                  gsm_state = 20;
                break;
               }


      case  20: {
                if (tmp == 'O')
                {
                  gsm_state = 21;                // Expecting CR+LF

                }
                else
                  gsm_state = 0;                 // Reset state machine
                break;
               }
      case  21: {
                if (tmp == 'Q')
                {
                  recibinoreq=0x01;
                  PORTD=0xAA;
                  gsm_state = 0;                // Expecting CR+LF

                }
                else
                  gsm_state = 0;                 // Reset state machine
                break;
               }

      case  80: {
                if (tmp == '5')
                {
                  gsm_state = 81;                // Expecting CR+LF

                }
                else
                  gsm_state = 0;                 // Reset state machine
                break;
               }
      case  81: {
                if (tmp == '3')
                {
                  recibiok=0x01;
                  gsm_state=0;

                }
                else
                  gsm_state = 0;                 // Reset state machine
                break;
               }

      case  70: {
                if (tmp == 'E')
                {
                  gsm_state = 71;                // Expecting CR+LF

                }
                else
                  gsm_state = 0;                 // Reset state machine
                break;
               }
      case  71: {
                if (tmp == 'E')
                {
                  gsm_state = 72;                // Expecting CR+LF

                }
                else
                  gsm_state = 0;                 // Reset state machine
                break;
               }
      case  72: {
                if (tmp == 'Q')
                {
                  gsm_state = 73;                // Expecting CR+LF

                }
                else
                  gsm_state = 0;                 // Reset state machine
                break;
               }
      case  73: {
                if (tmp == 'Q')
                {
                  recibireq=0x01;
                  gsm_state=0;

                }
                else
                  gsm_state = 0;                 // Reset state machine
                break;
               }

      case  60: {
                if (tmp == 'o')
                {
                  gsm_state = 61;                // Expecting CR+LF

                }
                else
                  gsm_state = 0;                 // Reset state machine
                break;
               }
      case  61: {
                if (tmp == 'o') {
                  gsm_state = 62;                // Expecting CR+LF

                }
                else
                  gsm_state = 0;                 // Reset state machine
                break;
               }
      case  62: {
                if (tmp == 'd')
                {                // We have 'K' ->
                  recibigood=0x01;
                  gsm_state = 0;

                }
                else
                  gsm_state = 0;                 // Reset state machine
                break;
               }

      case  1: {
                if (tmp == 'K') {                // We have 'K' ->
                  recibiok=0x01;
                  gsm_state = 0;                // Expecting CR+LF

                }
                else
                  gsm_state = 0;                 // Reset state machine
                break;
               }
      case 10: {
                if (tmp == ' ') {
                  recibisisms=0x01;
                  gsm_state = 0;
                }
                gsm_state = 0;                   // Reset state machine
                break;
                }


      case 30: {
                if (tmp == 'R')                  // We have 'R', it could be "ERROR"
                  gsm_state = 31;                // Expecting 'R'
                else
                  gsm_state = 0;                 // Reset state machine
                break;
               }
      case 31: {
                if (tmp == 'R')                  // We have 'R', it could be "ERROR"
                  gsm_state = 32;                // Expecting 'O'
                else
                  gsm_state = 0;                 // Reset state machine
                break;
               }
      case 32: {
                if (tmp == 'O')                  // We have 'O', it could be "ERROR"
                  gsm_state = 33;                // Expecting 'R'
                else
                  gsm_state = 0;                 // Reset state machine
                break;
               }
      case 33: {
                if (tmp == 'R'){                 // We have 'R'
                  recibierror=0x01;
                  gsm_state=0;

                }
                gsm_state = 0;                   // Reset state machine
                break;
                }

      case  110: {
                if (tmp == 'O')
                {
                  gsm_state = 111;
                }
                else
                  gsm_state = 0;
                break;
               }
      case  111: {
                if (tmp == 'N')
                {
                  gsm_state = 112;
                }
                else
                  gsm_state = 0;
                break;
               }
      case  112: {
                if (tmp == 'N')
                {
                  gsm_state = 113;
                }
                else
                  gsm_state = 0;
                break;
               }
      case  113: {
                if (tmp == 'E')
                {
                  gsm_state = 114;
                }
                else
                  gsm_state = 0;
                break;
               }
      case  114: {
                if (tmp == 'C')
                {
                  gsm_state = 115;
                }
                else
                  gsm_state = 0;
                break;
               }
      case  115: {
                if (tmp == 'T')
                {
                  recibiconnect=0x01;
                  gsm_state = 0;
                }
                else
                  gsm_state = 0;
                break;
               }

      default: {                                 // Unwanted character
                gsm_state = 0;                   // Reset state machine
               }
    }

 }
}
